# -*- coding: utf-8 -*-
"""SCORE CES-D1_Feature_Selection_using_GA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10DGvNrbx-BuFqTHQzP4KugZP_pwNI1bm
"""

import numpy as np
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import cross_val_score
from matplotlib import pyplot as plt
import random
import pandas as pd

from google.colab import drive
drive.mount('/content/drive')

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %ls -l
# %cd 'MyDrive/'

file_path = "/content/drive/MyDrive/SCORE CES-D1.xlsx"
df = pd.read_excel(file_path)

df.shape

X = df.iloc[:-1, 1:31]
print("Shape of X:", X.shape)

"""### Population Generation"""

import numpy as np
population = np.random.randint(0, 2, (100,30))
initial_population = population
print(population.shape)
print(population)

"""### Parent Selection"""

import numpy as np

def select_parents(population):
    num_parents = np.random.randint(1, len(population) + 1)
    parent_indices = np.random.choice(len(population), size=num_parents, replace=False)
    parents = [population[i] for i in parent_indices]

    return parents

"""### Cross Over"""

def two_point_crossover(parents, probability):
    random.shuffle(parents)

    no_of_pairs = round(len(parents) * probability / 2)
    chromosome_len = len(parents[0])
    crossover_population = []

    for num in range(no_of_pairs):
        length = len(parents)
        parent1_index = random.randrange(length)
        parent2_index = random.randrange(length)
        while parent1_index == parent2_index:
            parent2_index = random.randrange(length)

        start = random.randrange(chromosome_len)
        end = random.randrange(chromosome_len)
        if start > end:
            start, end = end, start

        parent1 = parents[parent1_index]
        parent2 = parents[parent2_index]

        child1 = np.concatenate((parent1[0:start], parent2[start:end], parent1[end:]))
        child2 = np.concatenate((parent2[0:start], parent1[start:end], parent2[end:]))

        parents = np.delete(parents, [parent1_index, parent2_index], axis=0)
        crossover_population.append(child1)
        crossover_population.append(child2)
    while len(crossover_population) < len(population):
        parent_index = random.randrange(len(parents))
        crossover_population.append(parents[parent_index])

    return crossover_population

"""### Mutation"""

def mutation(crossover_population):
    for individual in crossover_population:
      index_1 = random.randrange(len(individual))
      index_2 = random.randrange(len(individual))
      while(index_2==index_1 and individual[index_1] != individual[index_2]):
        index_2 = random.randrange(len(individual))
      temp = individual[index_1]
      individual[index_1] = individual[index_2]
      individual[index_2] = temp

    return crossover_population

gen = []
for i in range(15):
   gen.append(i+1)
   print("\n Generation :",i+1)
   parents = select_parents(population)
   print("No. of Chromosome in Parents Population:",len(parents))
   crossover_population = two_point_crossover(parents,0.78)
   mutation(crossover_population)
   print("Size of each chromosome in Mutated Population",len(crossover_population[0]))
   print("No. of Chromosome in Mutated Population",len(crossover_population))

print("The Population Generated is :")
crossover_population

